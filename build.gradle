buildscript {

    //https://github.com/Kotlin/kotlinx.coroutines
    ext.coroutinesVersion = "1.6.4"
    //https://github.com/csense-oss/csense-kotlin-test
    ext.csenseTestsVersion = "0.0.58"
    //https://github.com/csense-oss/csense-kotlin-annotations
    ext.csenseAnnotationVersion = "0.0.50"

    //https://github.com/JetBrains/kotlin/releases
    ext.kotlin_version = "1.7.10"

    //https://github.com/Kotlin/kotlinx-benchmark
    ext.kotlinx_benchmark_version = "0.4.5"

    //library settings - https://github.com/csense-oss/csense-kotlin

    //This library version
    ext.csenseVersionName = "0.0.60-snapshot2"

    ext.csenseUserOrg = "csense-oss"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin"
    ext.csenseLicense = "MIT"
    ext.csenseLicenseUrl = "https://mit-license.org/"

    ext.csenseDeveloperAlias = "tvede-dk"
    ext.csenseDeveloperName = "Kasper Tvede"
    ext.csenseDeveloperEmail = "csenseoss@tvedesys.dk"

    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin.git"
    ext.csenseArtifactDescription = "aim of this project is to add further extensions, features to the std lib and \"very common\" operations."

}


plugins {
    id "maven-publish"
    //https://github.com/JetBrains/kotlin
    id 'org.jetbrains.kotlin.multiplatform' version "$kotlin_version"
    //https://github.com/Kotlin/kotlinx-benchmark
    id 'org.jetbrains.kotlinx.benchmark' version "$kotlinx_benchmark_version"
    //https://github.com/jeremylong/DependencyCheck https://plugins.gradle.org/plugin/org.owasp.dependencycheck
    id "org.owasp.dependencycheck" version "7.2.1"
}

repositories {
    mavenCentral()
    maven {
        url 'https://pkgs.dev.azure.com/csense-oss/csense-oss/_packaging/csense-oss/maven/v1'
        name 'csense-oss'
    }
}

kotlin {
    explicitApi = 'strict'
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = '1.8'

        }
        withJava()
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
        }
    }
    js(BOTH) { //https://kotlinlang.org/docs/reference/whatsnew14.html#new-js-ir-backend
        browser {
            testTask {
                useKarma {
                    //useFirefox()
                    useChrome()
                }
            }
        }
        nodejs()
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin-annotations:$csenseAnnotationVersion"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin-tests:$csenseTestsVersion"
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {

        }

        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-benchmark-runtime:$kotlinx_benchmark_version"
            }
        }

        jsMain {

        }

        jsTest {

        }
        all {
            languageSettings {
                languageVersion = "1.7"
                optIn("kotlin.contracts.ExperimentalContracts")
                progressiveMode = true
            }
        }
    }
}

dependencyCheck {
    def allConfigsAsList = new ArrayList<>(configurations.getNames())
    def nonTestConfigurations = allConfigsAsList.findAll {
        !it.contains("Test") && (
                it.startsWith("js") ||
                        it.startsWith("jvm") ||
                        it.startsWith("jvm") ||
                        it.startsWith("common")
        )
    }

    analyzers {
        assemblyEnabled = false
    }
    scanConfigurations = nonTestConfigurations
    skipTestGroups = true
    failOnError = true
}

project.group = csenseGroupId
project.version = csenseVersionName

apply from: "$rootDir/gradle/publish.gradle"

task uploadProd(dependsOn: ["assemble", "allTests", "dependencyCheckAggregate", "publish"])


benchmark {
    targets {
        register("jvmTest") {
            //see https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core / https://github.com/openjdk/jmh
            jmhVersion = "1.35" // available only for JVM compilations & Java source sets
        }
    }
}


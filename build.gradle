buildscript {

    ext.coroutinesVersion = "1.5.2"
    ext.csenseTestsVersion = "0.0.51"
    ext.csenseAnnotationVersion = "0.0.41"

    //library settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseVersionName = "0.0.51"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin"
    ext.csenseLicense = "MIT"
    ext.csenseLicenseUrl = "https://mit-license.org/"

    ext.csenseDeveloperAlias = "tvede-dk"
    ext.csenseDeveloperName = "Kasper Tvede"
    ext.csenseDeveloperEmail = "csenseoss@tvedesys.dk"

    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin.git"
    ext.csenseArtifactDescription = ""
    //end library settings
}


plugins {
    id "net.linguica.maven-settings" version "0.5"
    id 'org.jetbrains.kotlin.multiplatform' version "1.5.30"
    id "org.jetbrains.dokka" version "1.5.0"
    id "maven-publish"
    id 'org.jetbrains.kotlinx.benchmark' version '0.3.1'
    id "org.owasp.dependencycheck" version "6.3.1"
}

repositories {
    mavenCentral()
    maven {
        url 'https://pkgs.dev.azure.com/csense-oss/csense-oss/_packaging/csense-oss/maven/v1'
        name 'csense-oss'
    }
}

kotlin {
    explicitApi = 'strict'
    jvm()
    js(BOTH) { //https://kotlinlang.org/docs/reference/whatsnew14.html#new-js-ir-backend
        browser{
            testTask {
                useKarma{
                    useFirefox()
                }
            }
        }
        nodejs()
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin-annotations:$csenseAnnotationVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "csense.kotlin:csense-kotlin-tests:$csenseTestsVersion"
            }
        }
        jvmMain {

        }

        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-reflect"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-benchmark-runtime:0.3.1"
            }
        }

        jsMain {

        }

        jsTest {
            dependencies {
            }
        }
        all {
            languageSettings {
                enableLanguageFeature("InlineClasses")
                optIn("kotlin.RequiresOptIn")
                progressiveMode = true
            }
        }
    }
}

jvmTest {

    testLogging {
        showStandardStreams = true
        events "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

dependencyCheck {
    def allConfigsAsList = new ArrayList<>(configurations.getNames())
    def nonTestConfigurations = allConfigsAsList.findAll {
        !it.contains("Test") && (
                it.startsWith("js") ||
                        it.startsWith("jvm") ||
                        it.startsWith("jvm") ||
                        it.startsWith("common")
        )
    }

    analyzers {
        assemblyEnabled = false
    }
    scanConfigurations = nonTestConfigurations
    skipTestGroups = true
    failOnError = true
}

project.group = csenseGroupId
project.version = csenseVersionName


apply from: "$rootDir/gradle/publish.gradle"

task uploadProd(dependsOn: ["assemble", "allTests", "dependencyCheckAggregate", "publish"])


benchmark {
    targets {
        register("jvmTest") {
            //see https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core / https://github.com/openjdk/jmh
            jmhVersion = "1.33" // available only for JVM compilations & Java source sets
        }
    }
}


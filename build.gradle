buildscript {

    ext.coroutinesVersion = "1.3.5"
    ext.junit5Version = "5.5.2"
    ext.csenseTestsVersion = "0.0.26"
    ext.csenseAnnotationVersion = "0.0.17"

    //library settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseRepoName = "maven"
    ext.csenseVersionName = "0.0.32"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin"
    ext.csenseGithub = "csense-oss/csense-kotlin"
    ext.csenseLicense = "MIT"
    ext.readme = "readme.md"
    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin.git"
    //end library settings
}


plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.70'
    id 'org.jetbrains.dokka' version '0.10.1'
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.4"
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/csense-oss/maven" }
}

group project.csenseGroupId
version project.csenseVersionName

kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin-annotations-metadata:$csenseAnnotationVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "csense.kotlin:csense-kotlin-tests-metadata:$csenseTestsVersion"
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin-annotations-jvm:$csenseAnnotationVersion"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation "org.jetbrains.kotlin:kotlin-reflect"
                implementation "csense.kotlin:csense-kotlin-tests-jvm:$csenseTestsVersion"
            }

        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin-annotations-js:$csenseAnnotationVersion"
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
                implementation "csense.kotlin:csense-kotlin-tests-js:$csenseTestsVersion"
            }
        }
    }
}

kotlin.sourceSets.all {
    languageSettings.progressiveMode = true
}

jvmTest {
    useJUnitPlatform()
}
dokka {
    multiplatform {
        global {
            perPackageOption {
                prefix = "csense.kotlin"
                suppress = true
            }
        }
        js {}
        jvm {
        }
    }
}


bintray {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties')?.newDataInputStream())
        user = properties.getProperty('bintrayUser')
        key = properties.getProperty('bintrayApiKey')
    } catch (Exception ignored) {
        print "could not read local.properties"
    }
    publications = publishing.publications.getNames()
    override = true
    publish = false
    pkg {
        repo = project.csenseRepoName
        userOrg = project.csenseUserOrg
        vcsUrl = project.csenseGit
        licenses = project.csenseLicense
        name = project.csenseArtifactId
    }
}

task uploadProd(dependsOn: ["assemble", "allTests", "dokka", "javadocJar", "bintrayUpload"])


task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "$buildDir/dokkaJavadoc"
}

final def javaDocJarTask = task("javadocJar", type: Jar, dependsOn: "dokkaJavadoc") {
    archiveClassifier.set('javadoc')
    from "${project.buildDir}/dokkaJavadoc"
}


publishing {
    publications {
        jvm {
            artifact(javaDocJarTask)
        }
    }
}

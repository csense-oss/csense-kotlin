buildscript {

    ext.coroutinesVersion = "1.3.9"
    ext.junit5Version = "5.5.2"
    ext.csenseTestsVersion = "0.0.40"
    ext.csenseAnnotationVersion = "0.0.40"

    //library settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseRepoName = "maven"
    ext.csenseVersionName = "0.0.42"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin"
    ext.csenseGithub = "csense-oss/csense-kotlin"
    ext.csenseLicense = "MIT"
    ext.csenseLicenseUrl = "https://mit-license.org/"

    ext.csenseDeveloperAlias = "tvede-dk"
    ext.csenseDeveloperName = "Kasper Tvede"
    ext.csenseDeveloperEmail = "csenseoss@tvedesys.dk"

    ext.readme = "readme.md"
    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin.git"
    ext.csenseArtifactDescription = ""
    //end library settings
}


plugins {
    id 'org.jetbrains.kotlin.multiplatform' version "1.4.0"
    id("org.jetbrains.dokka") version "0.10.0"
    id "maven-publish"
    id 'kotlinx.benchmark' version "0.2.0-dev-20"
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/csense-oss/maven" }
    maven { url 'https://dl.bintray.com/kotlin/kotlinx' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
}

kotlin {
    explicitApi = 'strict'
    jvm()
    js(LEGACY) { //https://kotlinlang.org/docs/reference/whatsnew14.html#new-js-ir-backend
        browser()
        nodejs()
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
                implementation "csense.kotlin:csense-kotlin-annotations:$csenseAnnotationVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "csense.kotlin:csense-kotlin-tests:$csenseTestsVersion"
                implementation("org.jetbrains.kotlinx:kotlinx.benchmark.runtime:0.2.0-dev-20")
            }
        }
        jvmMain {

        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation "org.jetbrains.kotlin:kotlin-reflect"
            }

        }

        jsMain {

        }

        jsTest {
            dependencies {
            }
        }
        all {
            languageSettings {
                enableLanguageFeature("InlineClasses")
                useExperimentalAnnotation('kotlin.RequiresOptIn')
                progressiveMode = true
            }
        }
    }
}

jvmTest {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
//    jacoco {
//        destinationFile = file("${buildDir}/jacoco/test.exec")
//    }
}


//required for the dokka.

task docJvm(type: org.jetbrains.dokka.gradle.DokkaTask) {

    outputFormat = 'javadoc'

    outputDirectory = "$buildDir/doc_jvm"

    impliedPlatforms = ["Common"] // This will force platform tags for all non-common sources e.g. "JVM"
}


project.group = csenseGroupId
project.version = csenseVersionName

apply from: "$rootDir/gradle/dokka.gradle"
apply from: "$rootDir/gradle/publish.gradle"

task uploadProd(dependsOn: ["assemble", "allTests", "publish"])


benchmark {
    targets {
        register("jvmTest") {
            jmhVersion = "1.23" // available only for JVM compilations & Java source sets
        }
    }
}
